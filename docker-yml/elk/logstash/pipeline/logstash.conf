input {
  beats {
    port => 5044
    ssl_enabled => false  # 根据之前的错误，确保使用 'ssl_enabled' 而不是 'ssl'
  }
}

filter {
  # 如果 Filebeat 未完全解析 JSON，可以使用 json 过滤器
  # json {
  #   source => "message"
  #   remove_field => ["message"]
  # }

  # 使用 date 过滤器解析 @t 字段
  date {
    match => ["@t", "ISO8601"]
    target => "@timestamp"
    remove_field => ["@t"]  # 可选：移除原始 @t 字段
  }

  # 处理其他重构属性
  mutate {
    rename => { "@m" => "message" }
    rename => { "@mt" => "message_template" }
    rename => { "@l" => "level" }
    rename => { "@x" => "exception" }
    rename => { "@i" => "event_id" }
    rename => { "@r" => "renderings" }
    rename => { "@tr" => "trace_id" }
    rename => { "@sp" => "span_id" }

    # 如果需要，可以转换字段类型
    convert => { 
      "event_id" => "string"
      "level" => "string"  # 根据实际情况调整
    }

    # 移除不需要的字段
    remove_field => ["host", "agent"]  # 根据需要调整
  }

  # 根据日志级别添加严重性字段
  if [level] == "error" {
    mutate { add_field => { "severity" => "high" } }
  } else if [level] == "warning" {
    mutate { add_field => { "severity" => "medium" } }
  } else {
    mutate { add_field => { "severity" => "low" } }
  }

  # 处理异常信息（可选）
  if [exception] {
    # 示例：将异常信息拆分为类型和消息
    grok {
      match => { "exception" => "%{WORD:exception_type}: %{GREEDYDATA:exception_message}" }
    }
  }
}

output {
  if [project] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "logs-%{project}-%{+YYYY.MM.dd}"
      user => "logstash_system"          # Elasticsearch 用户名
      password => "123456" # Elasticsearch 密码
      # 可选：启用 SSL/TLS
      # ssl => true
      # cacert => "/path/to/ca.crt"
    }
  } else {
    # 处理没有 project 字段的日志
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "logs-unknown-%{+YYYY.MM.dd}"
      user => "logstash_system"
      password => "123456"
    }
  }
}
